<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Services\Util;
/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductsRepository extends EntityRepository
{
    public function findProductByColors($ids = array())
    {
        //$ids = array(1,2,3,4);

        $ids = implode(',',$ids);
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT DISTINCT(product_id) FROM products_colors WHERE color_id IN($ids)";
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function findFiltered(
        $category,
        $minPrice = null,
        $maxPrice = null,
        $minWidth = null,
        $maxWidth = null,
        $minHeight = null,
        $maxHeight = null,
        $creator = null
    )
    {
        $qb = $this->createQueryBuilder('p');

        if(!is_null($creator)){
            $where = 'p.creator = :creator';
            $parametersArray = array('creator' => $creator);
        }else{
            $where = 'p.category = :category';
            $parametersArray = array('category' => $category);
        }
        if(!is_null($minPrice)){
            $where .= ' AND p.price >= :minPrice';
            $parametersArray['minPrice'] =  $minPrice;
        }

        if(!is_null($maxPrice)){
            $where .= ' AND p.price <= :maxPrice';
            $parametersArray['maxPrice'] =  $maxPrice;
        }

        if(!is_null($minWidth)){
            $where .= ' AND p.width >= :minWidth';
            $parametersArray['minWidth'] =  $minWidth;
        }

        if(!is_null($maxWidth)){
            $where .= ' AND p.width <= :maxWidth';
            $parametersArray['maxWidth'] =  $maxWidth;
        }

        if(!is_null($minHeight)){
            $where .= ' AND p.height >= :minHeight';
            $parametersArray['minHeight'] =  $minHeight;
        }

        if(!is_null($maxHeight)){
            $where .= ' AND p.height <= :maxHeight';
            $parametersArray['maxHeight'] =  $maxHeight;
        }



        $qb->where($where);
        $qb->setParameters($parametersArray);

        return $qb->getQuery()->getResult();

    }

    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('p')
            ->where('p.id in (:array)')
            ->setParameter('array',$array);

        return $qb->getQuery()->getResult();
    }

    public function findForSearch($q,$locale)
    {
        switch($locale){
            case 'en':
                $title = 'titleEng';
                break;
            case 'ru':
                $title = 'titleRus';
                break;
            case 'am':
                $title = 'titleArm';
                break;
        }
        $query = $this->getEntityManager()->createQuery("
            SELECT p FROM AppBundle:Products p
            WHERE p.$title LIKE :q
        ")->setParameter('q','%'.$q.'%');

        return $query->getResult();
    }
}
